//----------------------------------------------------------------------
// This template originally from:
// https://github.com/openshift/origin/blob/master/examples/jenkins/pipeline/nodejs-sample-pipeline.yaml
//----------------------------------------------------------------------

def TEMPLATEPATH = 'https://raw.githubusercontent.com/openshift/nodejs-ex/master/openshift/templates/nodejs-mongodb.json'
def TEMPLATENAME = 'nodejs-mongodb-example'

// NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
// and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
// will not be fully engaged.
pipeline {
    agent {
      node {
        // spin up a node.js slave pod to run this build on
        label 'nodejs'
      }
    }
    options {
        // set a timeout of 10 minutes for this pipeline
        timeout(time: 10, unit: 'MINUTES')
    }
    stages {
        stage('preamble') {
            steps {
                script {
                    openshift.withCluster("production") {
                        openshift.withProject("pipeline-app") {
                            echo "Using cluster: ${openshift.cluster()}"
                            echo "Using project: ${openshift.project()}"
                        }
                    }
                }
            }
        }
        stage('cleanup') {
            steps {
                script {
                    openshift.withCluster("production") {
                        openshift.withProject("pipeline-app") {
                            // delete everything with this template label
                            openshift.selector("all", [ template : TEMPLATENAME ]).delete()
                            // delete any secrets with this template label
                            if (openshift.selector("secrets", TEMPLATENAME).exists()) {
                                openshift.selector("secrets", TEMPLATENAME).delete()
                            }
                        }
                    }
                } // script
            } // steps
        } // stage
        stage('create') {
            steps {
                script {
                    openshift.withCluster("production") {
                        openshift.withProject("pipeline-app") {
                            // create a new application from the TEMPLATEPATH
                            openshift.newApp(TEMPLATEPATH)
                        }
                    }
                } // script
            } // steps
        } // stage
        stage('deploy') {
            steps {
                script {
                    openshift.withCluster("production") {
                        openshift.withProject("pipeline-app") {
                            def rm = openshift.selector("dc", TEMPLATENAME).rollout()
                            openshift.selector("dc", TEMPLATENAME).related('pods').untilEach(2) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                    }
                } // script
            } // steps
        } // stage
    } // stages
} // pipeline
